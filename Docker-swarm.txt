Docker-Swarm
cluster of docker conatiners are managed by docker swarm.
manage application to stay up and running.
In Docker-swarm multiple docker hosts run in swarm mode, some work as master and some work as worker.
A single machine can work as master as well as worker. Master will remain the state and instruct to maintain number of replicas. 
Minimum of 3 manager nodes (has election within them to make a leader) the data remain in sync between them by raft consensus algorithm.
Number of masters are in odd numbers = (n-1)/2  n is number of nodes required.
Worker node always requires a master node, where as master can work independently. Every workers has an agent installed which tells current state to master.
Master and worker works with secure communication ie TLS (Transport Layer Security) and Certificate Authority. Worker has a token to communicate with master.

all nodes should ne in one cluster (Network)
>>docker should be enable on each node (master and worker)
>>docker --version
>>service docker start
>>service docker status
>>docker info | head -50 (swarm will be inactive)
>>docker swarm init (to initialize docker swarm)
this above command will also provide token command for workers to join.
>>docker node ls (to check nodes in cluster as worker/master)
>>docker swarm join-token manager (to add managers to a cluster)
>>docker swarm join-token worker (to generate new token to add workers)
>>docker swarm leave (to come out of cluster)
>>docker info | less (to check status of swarm)
>>docker node rm -f <nodename> (to remove worker/manager from cluster)
>>docker node inspect <node name> | less (details of node)
>>docker node promote <node name> (to promote node to master *managers are in odd numbers*)
>>docker node demote <node name>

>>docker run container run -it alpine 192.168.25.10 (eg to run a container and get ping on one node cluster but below is for swarm)
>>docker service (on master run commands only)
>>watch docker container ls (to see running container state after 2 sec)
>>docker service create -d alpine ping <master ip>
>>docker service ls
>>docker service inspect <service id> | less
>>docker service logs <service id>
>>docker service create -d --replicas 4 alpine (4 number of containers will be created in this service, container will be distributed among master and workers)
>>docker service ps <service id> (will tell you details tasks in service)
>>docker container rm -f <container id/ first 2 digits of id>
* DOcker manager maintains desire state of service/containers.
>>docker service scale <service id>=<number> (to scale up/dowm to desire number)
>>docker service create -d -p 8090:80 nginx
*(service can be accessed from all nodes master/worker IP:port)

Docker swarm visualizer : to have better visualization of services and nodes work

>>docker service create mode=global alpine ping 8.8.8.8 (mode global make sure that the service is present on all nodes eg antivirus, monitoring service)
>>docker service create --replicas=<number> --constraint="node.role==<worker/manager> alpine ping 8.8.8.8 
to add label in docker swarm: docker node update --help | grep label (--label-add list)
>>docker node update --label-add="ssd=true" <nodename>
>>docker service create --constraint="node.labels.ssd==true" --replicas=3 -d alpine ping <any node IP>

node label vs engine label(at engine level)
to add a label got to "/etc/docker" dir and create or gor to daemon.json file on node where you want to add label. restart docker service on that.
>>docker service create --constraint="engine.labels.name==ishpreetnode" --replicas=3 -d alpine ping 8.8.8.8
Node availability (active/drain/pause)
Active: the worker node is ready to take work from manager.
Pause: the worker node already has work on it and it cannot take more work on it.
Drain: the worker node already has running container and required os patch or some work on it, so it requires work to be shifted to other nodes and thus in drain state.
>>docker node update --availability=pause <nodename>

*Reserve cpu/memory usage for a container
--reserve-cpu decimal : Reserves CPUs
--reserve-memory bytes : Reserves Memory 
*limit cpu/memory usage 
--limit-cpu decimal : Limit CPUs
--limit-memory bytes : Limit Memory
*Update 
--update-delay duration : Delay between updates (ns|us|ms|s|m|h) (default 0s)
--update-failure-action string : Action on update failure (default='pause', 'continue', 'rollback')
--update-max-failure-ratio float : Failure rate to tolerate during an update (default=0)
--update-monitor duration : Duration after each task update to monitor (ns|us|ms|s|m|h) (default 5s)
--update-order string : Update order ('start-first', 'stop-first') default=stop-first
--update-parallelism unit : Maximum number of task updated simultaneously  (0 to update all task at once) default=1

Docker Secret
>>docker secret create dbpass - 
(provide input and press Enter and Ctrl+D)
>>docker secret ls
>>docker secret inspect
>>docker secret create <secret name> <file name> (you can create you secret based on file like ssh key/db password/tsl certificates/API keys)
>>docker service create -d  --secret <secret name> alpine ping 8.8.8.8
in running container the secret is store in "/run/secret/<secret name>"
>>docker service create -d --secret <secret name> -e MYSQL_ROOT_PASSWORD_FILE=/run/secret/<secret name> mysql
>>docker container exec -it <container id> bash
>>mysql -u root -p<secret name>  (to access mysql service inside container)

Overlay Network spreads over Hosts for network and easy access for containers to each other. Overlay network should have enough address space to allocate ip to containers.
it's a docker network driver (bridge, overlay, host). Overlay doesnot suport windows networking. 
Ingress network : Docker swarm automatically use ingress network which has in-built load balancer to divide traffic and use same port of host. when we have more replicas of same container this helps for host port to remain same and utilize it. to redirect traffic to required container automatically.
A docker bridge network is connected to every container which is connected to overlay network
